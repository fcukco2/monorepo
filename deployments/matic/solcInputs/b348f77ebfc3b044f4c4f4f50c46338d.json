{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/CO2Burner.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Registry.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/INatureCarbonTonne.sol\";\nimport \"./interfaces/ITCO2.sol\";\n\ncontract CO2Burner {\n    Registry public immutable registry;\n    IERC20 public immutable stablecoin;\n    IUniswapV2Router02 public immutable dexRouter;\n    address public immutable nctToken;\n\n    event Retired(address indexed retiree, address indexed token, uint tcoAmount, uint usdcAmount);\n\n    constructor(address _registry, address _stablecoin, address _nctToken, address _dexRouter) {\n        registry = Registry(_registry);\n        stablecoin = IERC20(_stablecoin);\n        nctToken = _nctToken;\n        dexRouter = IUniswapV2Router02(_dexRouter);\n    }\n\n    function burnCO2(uint stableCoinAmount, string memory filter) external returns (uint totalTco2AmountBurned, uint totalUsdcAmountBurned){\n        address [] memory projectTokens = registry.findBestProjectTokens(filter);\n        uint stableToBurn = stableCoinAmount;\n        uint index = 0;\n        totalTco2AmountBurned = 0;\n        totalUsdcAmountBurned = 0;\n        while (stableCoinAmount > 0 && index < projectTokens.length) {\n            uint tco2AmountBurned;\n            uint usdcAmountBurned;\n            (tco2AmountBurned, usdcAmountBurned) = burnProjectToken(projectTokens[index], stableToBurn);\n            stableToBurn -= usdcAmountBurned;\n            totalTco2AmountBurned += tco2AmountBurned;\n            totalUsdcAmountBurned += usdcAmountBurned;\n            index++;\n        }\n    }\n\n    function burnProjectToken(address projectToken, uint stableCoinAmount) public returns (uint, uint){\n        address[] memory path = new address[](2);\n        path[0] = address(stablecoin);\n        path[1] = address(nctToken);\n        uint[] memory amountsSt = dexRouter.getAmountsIn(INatureCarbonTonne(nctToken).tokenBalances(projectToken), path);\n        uint maxStableIn = amountsSt[0];\n\n        stableCoinAmount = min(stableCoinAmount, maxStableIn);\n\n        uint[] memory amounts = dexRouter.getAmountsOut(stableCoinAmount, path);\n        uint amountIn = amounts[0];\n        uint amountOut = amounts[1];\n\n        stablecoin.transferFrom(msg.sender, address(this), stableCoinAmount);\n        stablecoin.approve(address(dexRouter), amountIn);\n        dexRouter.swapExactTokensForTokens(stableCoinAmount, amountOut, path, address(this), block.timestamp);\n\n        uint[] memory redeemAmounts = new uint[](1);\n        redeemAmounts[0] = amountOut;\n\n        address[] memory tco2s = new address[](1);\n        tco2s[0] = projectToken;\n\n        INatureCarbonTonne(nctToken).redeemMany(tco2s, redeemAmounts);\n        uint projectTokenBalance = IERC20(projectToken).balanceOf(address(this));\n\n        ITCO2(projectToken).retire(projectTokenBalance);\n        emit Retired(msg.sender, projectToken, projectTokenBalance, stableCoinAmount);\n        return (projectTokenBalance, stableCoinAmount);\n    }\n\n    function burnProjectTokenQuote(address projectToken, uint stableCoinAmount) public view returns (uint, uint){\n        address[] memory path = new address[](2);\n        path[0] = address(stablecoin);\n        path[1] = address(nctToken);\n        uint[] memory amountsSt = dexRouter.getAmountsIn(INatureCarbonTonne(nctToken).tokenBalances(projectToken), path);\n        uint maxStableIn = amountsSt[0];\n\n        stableCoinAmount = min(stableCoinAmount, maxStableIn);\n\n        uint[] memory amounts = dexRouter.getAmountsOut(stableCoinAmount, path);\n        uint amountIn = amounts[0];\n        uint amountOut = amounts[1];\n\n        uint[] memory redeemAmounts = new uint[](1);\n        redeemAmounts[0] = amountOut;\n\n        address[] memory tco2s = new address[](1);\n        tco2s[0] = projectToken;\n        uint nctRedeemFee = INatureCarbonTonne(nctToken).calculateRedeemFees(tco2s, redeemAmounts);\n        return (amountOut - nctRedeemFee, stableCoinAmount);\n    }\n\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n}\n"
    },
    "contracts/interfaces/INatureCarbonTonne.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n\n/// @notice Nature Carbon Tonne (or NatureCarbonTonne)\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\n//slither-disable-next-line unprotected-upgrade\ninterface INatureCarbonTonne{\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n    event ExternalAddressWhitelisted(address erc20addr);\n    event ExternalAddressRemovedFromWhitelist(address erc20addr);\n    event InternalAddressWhitelisted(address erc20addr);\n    event InternalAddressBlacklisted(address erc20addr);\n    event InternalAddressRemovedFromBlackList(address erc20addr);\n    event InternalAddressRemovedFromWhitelist(address erc20addr);\n    event AttributeStandardAdded(string standard);\n    event AttributeStandardRemoved(string standard);\n    event AttributeMethodologyAdded(string methodology);\n    event AttributeMethodologyRemoved(string methodology);\n    event AttributeRegionAdded(string region);\n    event AttributeRegionRemoved(string region);\n    event RedeemFeePaid(address redeemer, uint256 fees);\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\n    event ToucanRegistrySet(address ContractRegistry);\n    event MappingSwitched(string mappingName, bool accepted);\n    event SupplyCapUpdated(uint256 newCap);\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\n    event TCO2ScoringUpdated(address[] tco2s);\n\n    /// @dev Returns the current version of the smart contract\n    function version() external pure returns (string memory);\n\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice Deposit function for NCT pool that accepts TCO2s and mints NCT 1:1\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\n    /// for each TCO2 separately\n    function deposit(address erc20Addr, uint256 amount)external;\n\n    /// @notice Checks if token to be deposited is eligible for this pool\n    function checkEligible(address erc20Addr)\n        external\n        view\n        returns (bool);\n\n    /// @notice Checks whether incoming TCO2s match the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        external\n        view\n        returns (bool);\n\n    /// @notice Update the fee redeem percentage\n    /// @param _feeRedeemPercentageInBase percentage of fee in base\n    function setFeeRedeemPercentage(uint256 _feeRedeemPercentageInBase)\n        external;\n\n    /// @notice Update the fee redeem receiver\n    /// @param _feeRedeemReceiver address to transfer the fees\n    function setFeeRedeemReceiver(address _feeRedeemReceiver)\n        external;\n\n    /// @notice Update the fee redeem burn percentage\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\n        external;\n\n    /// @notice Update the fee redeem burn address\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\n        external;\n\n    /// @notice Adds a new address for redeem fees exemption\n    /// @param _address address to be exempted on redeem fees\n    function addRedeemFeeExemptedAddress(address _address)\n        external;\n\n\n    /// @notice View function to calculate fees pre-execution\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// @return Total fees amount\n    function calculateRedeemFees(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    ) external view returns (uint256);\n\n    /// @notice Redeems Pool tokens for multiple underlying TCO2s 1:1 minus fees\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// NCT Pool token in user's wallet get burned\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\n        external;\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts\n    /// starting from contract at index 0 until amount is satisfied\n    /// @param amount Total amount to be redeemed\n    /// @dev NCT Pool tokens in user's wallet get burned\n    function redeemAuto(uint256 amount) external;\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\n    /// index 0 until amount is satisfied. redeemAuto2 is slightly more expensive\n    /// than redeemAuto but it is going to be more optimal to use by other on-chain\n    /// contracts.\n    /// @param amount Total amount to be redeemed\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\n    /// automatically redeemed\n    function redeemAuto2(uint256 amount)\n        external\n        returns (address[] memory tco2s, uint256[] memory amounts);\n\n    /// @dev Returns the remaining space in pool before hitting the cap\n    function getRemaining() external view returns (uint256);\n\n\n    function transfer(address recipient, uint256 amount)\n        external\n        virtual\n        returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function getScoredTCO2s() external view returns (address[] memory);\n\n    function tokenBalances(address tco2) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITCO2.sol": {
      "content": "interface ITCO2{\n    function retire(uint256 amount) external;\n}"
    },
    "contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/MockSubgraph.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract MockSubgraph {\n    event Retired(address indexed retiree, address indexed token, uint tcoAmount, uint usdcAmount);\n\n    constructor() {\n      emit Retired(msg.sender, 0x62896F42CF1371B268Db56E50D67C34F3eb1aD7a, 1e18, 2e6);\n      emit Retired(msg.sender, 0xB8802C009dd265B38E320214a7720EBd7A488827, 2e18, 4e6);\n      emit Retired(msg.sender, 0xB00110CC12cDC8F666f33F4e52e4957Ff594282f, 4e18, 16e6);\n    }\n\n    function emitEvent(address retiree, address token, uint tcoAmount, uint usdcAmount) public returns (bool) {\n      emit Retired(retiree, token, tcoAmount, usdcAmount);\n      return true;\n    }\n\n}"
    },
    "contracts/Registry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Registry is Ownable {\n\n    address [] public allProjectTokens;\n    mapping(string => address []) public projectTokensByCountry;\n    mapping(string => address []) public projectTokensByCategory;\n\n    constructor(){}\n\n    function addAllProjectTokens(address [] memory projectTokens) external onlyOwner {\n        allProjectTokens = projectTokens;\n    }\n\n    function addProjectTokenByCountry(string memory countryCode, address [] memory projectTokens) external onlyOwner {\n        projectTokensByCountry[countryCode] = projectTokens;\n    }\n\n    function addProjectTokenByCategory(string memory category, address [] memory projectTokens) external onlyOwner {\n        projectTokensByCategory[category] = projectTokens;\n    }\n\n    function getProjectTokenByCountry(string memory country) external view returns (address [] memory) {\n        return projectTokensByCountry[country];\n    }\n\n    function getProjectTokenByCategory(string memory category) external view returns (address [] memory) {\n        return projectTokensByCategory[category];\n    }\n\n    function findBestProjectTokens(string memory filter) external view returns (address [] memory) {\n        uint filterLength = _strlen(filter);\n        if (filterLength == 0) {\n            return allProjectTokens;\n        }\n        require(filterLength == 5, \"Invalid filter\");\n        string memory countryCode = _substring(filter, 0, 2);\n        string memory category = _substring(filter, 2, 5);\n\n        string memory emptyCategory = \"XXX\";\n        string memory emptyCountry = \"XX\";\n\n        if (keccak256(abi.encodePacked(category)) == keccak256(abi.encodePacked(emptyCategory))) {\n            return projectTokensByCountry[countryCode];\n        }\n\n        if (keccak256(abi.encodePacked(countryCode)) == keccak256(abi.encodePacked(emptyCountry))) {\n            return projectTokensByCategory[category];\n        }\n\n        address [] memory projectTokens = projectTokensByCountry[countryCode];\n        address [] memory projectTokensByCategory = projectTokensByCategory[category];\n        return _intersectArrays(projectTokens, projectTokensByCategory);\n    }\n\n    function _substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n        for (uint i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function _strlen(string memory s) internal pure returns (uint256) {\n        uint256 len;\n        uint256 i = 0;\n        uint256 bytelength = bytes(s).length;\n        for (len = 0; i < bytelength; len++) {\n            bytes1 b = bytes(s)[i];\n            if (b < 0x80) {\n                i += 1;\n            } else if (b < 0xE0) {\n                i += 2;\n            } else if (b < 0xF0) {\n                i += 3;\n            } else if (b < 0xF8) {\n                i += 4;\n            } else if (b < 0xFC) {\n                i += 5;\n            } else {\n                i += 6;\n            }\n        }\n        return len;\n    }\n\n    /**\n   * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\n   * @param A The first array\n   * @param B The second array\n   * @return The intersection of the two arrays\n   */\n    function _intersectArrays(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n        uint length = A.length;\n        bool[] memory includeMap = new bool[](length);\n        uint newLength = 0;\n        for (uint i = 0; i < length; i++) {\n            if (_contains(B, A[i])) {\n                includeMap[i] = true;\n                newLength++;\n            }\n        }\n        address[] memory newAddresses = new address[](newLength);\n        uint j = 0;\n        for (uint i = 0; i < length; i++) {\n            if (includeMap[i]) {\n                newAddresses[j] = A[i];\n                j++;\n            }\n        }\n        return newAddresses;\n    }\n\n    function _contains(address[] memory A, address a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (0, false);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}