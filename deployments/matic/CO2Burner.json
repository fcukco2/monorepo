{
  "address": "0xE66EDdB497af36eF1C52EE2265155e6Edf2ABA05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nctToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dexRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "retiree",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tcoAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "Retired",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stableCoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "filter",
          "type": "string"
        }
      ],
      "name": "burnCO2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalTco2AmountBurned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsdcAmountBurned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stableCoinAmount",
          "type": "uint256"
        }
      ],
      "name": "burnProjectToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stableCoinAmount",
          "type": "uint256"
        }
      ],
      "name": "burnProjectTokenQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dexRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nctToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6b98a2d351acb740596660a967b87ea65d02bf4a3df8e584a4c457135a3385a",
  "receipt": {
    "to": null,
    "from": "0x17Cd1873F7da84C8Aa90f41cd104fC1dD103f35D",
    "contractAddress": "0xE66EDdB497af36eF1C52EE2265155e6Edf2ABA05",
    "transactionIndex": 26,
    "gasUsed": "1638489",
    "logsBloom": "0x
    "blockHash": "0xe27b3229ab255fe3aad239604629aa433f06c7e0ae7329fc3fd84d7051de9cc4",
    "transactionHash": "0xb6b98a2d351acb740596660a967b87ea65d02bf4a3df8e584a4c457135a3385a",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 43756810,
        "transactionHash": "0xb6b98a2d351acb740596660a967b87ea65d02bf4a3df8e584a4c457135a3385a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000017cd1873f7da84c8aa90f41cd104fc1dd103f35d",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001245496844b1f4300000000000000000000000000000000000000000000000079972cc4bd574f74000000000000000000000000000000000000000000001ca1c77a2180337ab7f30000000000000000000000000000000000000000000000007872d82e390c3031000000000000000000000000000000000000000000001ca1c89e7616b7c5d736",
        "logIndex": 115,
        "blockHash": "0xe27b3229ab255fe3aad239604629aa433f06c7e0ae7329fc3fd84d7051de9cc4"
      }
    ],
    "blockNumber": 43756810,
    "cumulativeGasUsed": "6768522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6BFe9a97A37DD49fBe0Cb6B010bD5Ecc95662db6",
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    "0xD838290e877E0188a4A44700463419ED96c16107",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
  ],
  "numDeployments": 2,
  "solcInputHash": "5dcf46409ee89e5e54f93e79151ee87d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nctToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"retiree\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tcoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"Retired\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"filter\",\"type\":\"string\"}],\"name\":\"burnCO2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTco2AmountBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcAmountBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"burnProjectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"burnProjectTokenQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nctToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CO2Burner.sol\":\"CO2Burner\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CO2Burner.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Registry.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/INatureCarbonTonne.sol\\\";\\nimport \\\"./interfaces/ITCO2.sol\\\";\\n\\ncontract CO2Burner {\\n    Registry public immutable registry;\\n    IERC20 public immutable stablecoin;\\n    IUniswapV2Router02 public immutable dexRouter;\\n    address public immutable nctToken;\\n\\n    event Retired(address indexed retiree, address indexed token, uint tcoAmount, uint usdcAmount);\\n\\n    constructor(address _registry, address _stablecoin, address _nctToken, address _dexRouter) {\\n        registry = Registry(_registry);\\n        stablecoin = IERC20(_stablecoin);\\n        nctToken = _nctToken;\\n        dexRouter = IUniswapV2Router02(_dexRouter);\\n    }\\n\\n    function burnCO2(uint stableCoinAmount, string memory filter) external returns (uint totalTco2AmountBurned, uint totalUsdcAmountBurned){\\n        address [] memory projectTokens = registry.findBestProjectTokens(filter);\\n        uint stableToBurn = stableCoinAmount;\\n        uint index = 0;\\n        totalTco2AmountBurned = 0;\\n        totalUsdcAmountBurned = 0;\\n        while (stableToBurn > 0 && index < projectTokens.length) {\\n            uint tco2AmountBurned;\\n            uint usdcAmountBurned;\\n            (tco2AmountBurned, usdcAmountBurned) = burnProjectToken(projectTokens[index], stableToBurn);\\n            stableToBurn -= usdcAmountBurned;\\n            totalTco2AmountBurned += tco2AmountBurned;\\n            totalUsdcAmountBurned += usdcAmountBurned;\\n            index++;\\n        }\\n    }\\n\\n    function burnProjectToken(address projectToken, uint stableCoinAmount) public returns (uint, uint){\\n        address[] memory path = new address[](2);\\n        path[0] = address(stablecoin);\\n        path[1] = address(nctToken);\\n        uint[] memory amountsSt = dexRouter.getAmountsIn(INatureCarbonTonne(nctToken).tokenBalances(projectToken), path);\\n        uint maxStableIn = amountsSt[0];\\n\\n        stableCoinAmount = min(stableCoinAmount, maxStableIn);\\n\\n        uint[] memory amounts = dexRouter.getAmountsOut(stableCoinAmount, path);\\n        uint amountIn = amounts[0];\\n        uint amountOut = amounts[1];\\n\\n        stablecoin.transferFrom(msg.sender, address(this), stableCoinAmount);\\n        stablecoin.approve(address(dexRouter), amountIn);\\n        dexRouter.swapExactTokensForTokens(stableCoinAmount, amountOut, path, address(this), block.timestamp);\\n\\n        uint[] memory redeemAmounts = new uint[](1);\\n        redeemAmounts[0] = amountOut;\\n\\n        address[] memory tco2s = new address[](1);\\n        tco2s[0] = projectToken;\\n\\n        INatureCarbonTonne(nctToken).redeemMany(tco2s, redeemAmounts);\\n        uint projectTokenBalance = IERC20(projectToken).balanceOf(address(this));\\n\\n        ITCO2(projectToken).retire(projectTokenBalance);\\n        emit Retired(msg.sender, projectToken, projectTokenBalance, stableCoinAmount);\\n        return (projectTokenBalance, stableCoinAmount);\\n    }\\n\\n    function burnProjectTokenQuote(address projectToken, uint stableCoinAmount) public view returns (uint, uint){\\n        address[] memory path = new address[](2);\\n        path[0] = address(stablecoin);\\n        path[1] = address(nctToken);\\n        uint[] memory amountsSt = dexRouter.getAmountsIn(INatureCarbonTonne(nctToken).tokenBalances(projectToken), path);\\n        uint maxStableIn = amountsSt[0];\\n\\n        stableCoinAmount = min(stableCoinAmount, maxStableIn);\\n\\n        uint[] memory amounts = dexRouter.getAmountsOut(stableCoinAmount, path);\\n        uint amountIn = amounts[0];\\n        uint amountOut = amounts[1];\\n\\n        uint[] memory redeemAmounts = new uint[](1);\\n        redeemAmounts[0] = amountOut;\\n\\n        address[] memory tco2s = new address[](1);\\n        tco2s[0] = projectToken;\\n        uint nctRedeemFee = INatureCarbonTonne(nctToken).calculateRedeemFees(tco2s, redeemAmounts);\\n        return (amountOut - nctRedeemFee, stableCoinAmount);\\n    }\\n\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd11a2db6cf0b64ea810eccfda647bd605beaadc4fc64b2687b4ff26dda2b1cdc\",\"license\":\"UNLICENSED\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Registry is Ownable {\\n\\n    address [] public allProjectTokens;\\n    mapping(string => address []) public projectTokensByCountry;\\n    mapping(string => address []) public projectTokensByCategory;\\n\\n    constructor(){}\\n\\n    function addAllProjectTokens(address [] memory projectTokens) external onlyOwner {\\n        allProjectTokens = projectTokens;\\n    }\\n\\n    function addProjectTokenByCountry(string memory countryCode, address [] memory projectTokens) external onlyOwner {\\n        projectTokensByCountry[countryCode] = projectTokens;\\n    }\\n\\n    function addProjectTokenByCategory(string memory category, address [] memory projectTokens) external onlyOwner {\\n        projectTokensByCategory[category] = projectTokens;\\n    }\\n\\n    function getProjectTokenByCountry(string memory country) external view returns (address [] memory) {\\n        return projectTokensByCountry[country];\\n    }\\n\\n    function getProjectTokenByCategory(string memory category) external view returns (address [] memory) {\\n        return projectTokensByCategory[category];\\n    }\\n\\n    function findBestProjectTokens(string memory filter) external view returns (address [] memory) {\\n        uint filterLength = _strlen(filter);\\n        if (filterLength == 0) {\\n            return allProjectTokens;\\n        }\\n        require(filterLength == 5, \\\"Invalid filter\\\");\\n        string memory countryCode = _substring(filter, 0, 2);\\n        string memory category = _substring(filter, 2, 5);\\n\\n        string memory emptyCategory = \\\"XXX\\\";\\n        string memory emptyCountry = \\\"XX\\\";\\n\\n        if (keccak256(abi.encodePacked(category)) == keccak256(abi.encodePacked(emptyCategory))) {\\n            return projectTokensByCountry[countryCode];\\n        }\\n\\n        if (keccak256(abi.encodePacked(countryCode)) == keccak256(abi.encodePacked(emptyCountry))) {\\n            return projectTokensByCategory[category];\\n        }\\n\\n        address [] memory projectTokens = projectTokensByCountry[countryCode];\\n        address [] memory projectTokensByCategory = projectTokensByCategory[category];\\n        return _intersectArrays(projectTokens, projectTokensByCategory);\\n    }\\n\\n    function _substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function _strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n\\n    /**\\n   * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\\n   * @param A The first array\\n   * @param B The second array\\n   * @return The intersection of the two arrays\\n   */\\n    function _intersectArrays(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint length = A.length;\\n        bool[] memory includeMap = new bool[](length);\\n        uint newLength = 0;\\n        for (uint i = 0; i < length; i++) {\\n            if (_contains(B, A[i])) {\\n                includeMap[i] = true;\\n                newLength++;\\n            }\\n        }\\n        address[] memory newAddresses = new address[](newLength);\\n        uint j = 0;\\n        for (uint i = 0; i < length; i++) {\\n            if (includeMap[i]) {\\n                newAddresses[j] = A[i];\\n                j++;\\n            }\\n        }\\n        return newAddresses;\\n    }\\n\\n    function _contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0e147f491ac25e51b7dbedbe513118d2ea500d755fea8d9f358248973206f98f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INatureCarbonTonne.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity ^0.8.0;\\n\\n\\n/// @notice Nature Carbon Tonne (or NatureCarbonTonne)\\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\\n//slither-disable-next-line unprotected-upgrade\\ninterface INatureCarbonTonne{\\n\\n    event Deposited(address erc20Addr, uint256 amount);\\n    event Redeemed(address account, address erc20, uint256 amount);\\n    event ExternalAddressWhitelisted(address erc20addr);\\n    event ExternalAddressRemovedFromWhitelist(address erc20addr);\\n    event InternalAddressWhitelisted(address erc20addr);\\n    event InternalAddressBlacklisted(address erc20addr);\\n    event InternalAddressRemovedFromBlackList(address erc20addr);\\n    event InternalAddressRemovedFromWhitelist(address erc20addr);\\n    event AttributeStandardAdded(string standard);\\n    event AttributeStandardRemoved(string standard);\\n    event AttributeMethodologyAdded(string methodology);\\n    event AttributeMethodologyRemoved(string methodology);\\n    event AttributeRegionAdded(string region);\\n    event AttributeRegionRemoved(string region);\\n    event RedeemFeePaid(address redeemer, uint256 fees);\\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\\n    event ToucanRegistrySet(address ContractRegistry);\\n    event MappingSwitched(string mappingName, bool accepted);\\n    event SupplyCapUpdated(uint256 newCap);\\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\\n    event TCO2ScoringUpdated(address[] tco2s);\\n\\n    /// @dev Returns the current version of the smart contract\\n    function version() external pure returns (string memory);\\n\\n\\n    // ----------------------------\\n    //   Permissionless functions\\n    // ----------------------------\\n\\n    /// @notice Deposit function for NCT pool that accepts TCO2s and mints NCT 1:1\\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\\n    /// for each TCO2 separately\\n    function deposit(address erc20Addr, uint256 amount)external;\\n\\n    /// @notice Checks if token to be deposited is eligible for this pool\\n    function checkEligible(address erc20Addr)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Checks whether incoming TCO2s match the accepted criteria/attributes\\n    function checkAttributeMatching(address erc20Addr)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Update the fee redeem percentage\\n    /// @param _feeRedeemPercentageInBase percentage of fee in base\\n    function setFeeRedeemPercentage(uint256 _feeRedeemPercentageInBase)\\n        external;\\n\\n    /// @notice Update the fee redeem receiver\\n    /// @param _feeRedeemReceiver address to transfer the fees\\n    function setFeeRedeemReceiver(address _feeRedeemReceiver)\\n        external;\\n\\n    /// @notice Update the fee redeem burn percentage\\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\\n        external;\\n\\n    /// @notice Update the fee redeem burn address\\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\\n        external;\\n\\n    /// @notice Adds a new address for redeem fees exemption\\n    /// @param _address address to be exempted on redeem fees\\n    function addRedeemFeeExemptedAddress(address _address)\\n        external;\\n\\n\\n    /// @notice View function to calculate fees pre-execution\\n    /// @dev User specifies in front-end the addresses and amounts they want\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem for each tco2s\\n    /// @return Total fees amount\\n    function calculateRedeemFees(\\n        address[] memory tco2s,\\n        uint256[] memory amounts\\n    ) external view returns (uint256);\\n\\n    /// @notice Redeems Pool tokens for multiple underlying TCO2s 1:1 minus fees\\n    /// @dev User specifies in front-end the addresses and amounts they want\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem for each tco2s\\n    /// NCT Pool token in user's wallet get burned\\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\\n        external;\\n\\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\\n    /// TCO2s from an array of ranked TCO2 contracts\\n    /// starting from contract at index 0 until amount is satisfied\\n    /// @param amount Total amount to be redeemed\\n    /// @dev NCT Pool tokens in user's wallet get burned\\n    function redeemAuto(uint256 amount) external;\\n\\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\\n    /// index 0 until amount is satisfied. redeemAuto2 is slightly more expensive\\n    /// than redeemAuto but it is going to be more optimal to use by other on-chain\\n    /// contracts.\\n    /// @param amount Total amount to be redeemed\\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\\n    /// automatically redeemed\\n    function redeemAuto2(uint256 amount)\\n        external\\n        returns (address[] memory tco2s, uint256[] memory amounts);\\n\\n    /// @dev Returns the remaining space in pool before hitting the cap\\n    function getRemaining() external view returns (uint256);\\n\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function getScoredTCO2s() external view returns (address[] memory);\\n\\n    function tokenBalances(address tco2) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7aef2b625247c18e5ae0b89f5c11f88679610a465c3d157865704ba19dcb3de2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITCO2.sol\":{\"content\":\"interface ITCO2{\\n    function retire(uint256 amount) external;\\n}\",\"keccak256\":\"0xdee8fc2418b09e0aa4ff3091159e6c0e52f5e7cd830f630181f4ad380d2ce7cd\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xdf2dc438d28e32482150952b66b87ae50742131968a95c26476b0f59eb0cc238\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5587f172bf56ac4435d970e05b16aec3e28323fb3aea3e4f5f568537bbbf7d3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001f3d38038062001f3d83398181016040528101906200003891906200017c565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505050620001ee565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001448262000117565b9050919050565b620001568162000137565b81146200016257600080fd5b50565b60008151905062000176816200014b565b92915050565b6000806000806080858703121562000199576200019862000112565b5b6000620001a98782880162000165565b9450506020620001bc8782880162000165565b9350506040620001cf8782880162000165565b9250506060620001e28782880162000165565b91505092959194509250565b60805160a05160c05160e051611c9e6200029f600039600081816101b3015281816102bb015281816103680152818161088f01528181610c8401528181610d31015261105001526000818161018f0152818161032c0152818161049601528181610656015281816106d901528181610cf50152610e5f01526000818161024c015281816105790152818161061a01528181610c15015261110f0152600081816101d70152610a870152611c9e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638def62481161005b5780638def6248146100dc578063c10df1e51461010d578063e3ab7e701461013e578063e9cbd8221461016f5761007d565b80630758d92414610082578063105036ae146100a05780637b103999146100be575b600080fd5b61008a61018d565b60405161009791906111c9565b60405180910390f35b6100a86101b1565b6040516100b59190611205565b60405180910390f35b6100c66101d5565b6040516100d39190611241565b60405180910390f35b6100f660048036038101906100f191906112d2565b6101f9565b604051610104929190611321565b60405180910390f35b61012760048036038101906101229190611490565b610a80565b604051610135929190611321565b60405180910390f35b610158600480360381019061015391906112d2565b610bc2565b604051610166929190611321565b60405180910390f35b61017761110d565b604051610184919061150d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000600267ffffffffffffffff81111561021957610218611365565b5b6040519080825280602002602001820160405280156102475781602001602082028036833780820191505090505b5090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061027f5761027e611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106102ee576102ed611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f00ca747f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663523fba7f896040518263ffffffff1660e01b81526004016103bf9190611205565b602060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610400919061156c565b846040518363ffffffff1660e01b815260040161041e929190611657565b600060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610464919061174f565b905060008160008151811061047c5761047b611528565b5b602002602001015190506104908682611131565b955060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f88866040518363ffffffff1660e01b81526004016104ef929190611657565b600060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610535919061174f565b905060008160008151811061054d5761054c611528565b5b6020026020010151905060008260018151811061056d5761056c611528565b5b602002602001015190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016105d493929190611798565b6020604051808303816000875af11580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190611807565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610693929190611834565b6020604051808303816000875af11580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190611807565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed17398a838930426040518663ffffffff1660e01b815260040161073895949392919061185d565b6000604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610780919061174f565b506000600167ffffffffffffffff81111561079e5761079d611365565b5b6040519080825280602002602001820160405280156107cc5781602001602082028036833780820191505090505b50905081816000815181106107e4576107e3611528565b5b6020026020010181815250506000600167ffffffffffffffff81111561080d5761080c611365565b5b60405190808252806020026020018201604052801561083b5781602001602082028036833780820191505090505b5090508b8160008151811061085357610852611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632b55414282846040518363ffffffff1660e01b81526004016108e8929190611975565b600060405180830381600087803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b5050505060008c73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109559190611205565b602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610996919061156c565b90508c73ffffffffffffffffffffffffffffffffffffffff16633790cf57826040518263ffffffff1660e01b81526004016109d191906119ac565b600060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b505050508c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f350c829dba3762192f7f146eaafe340156dec54eedfaea1df84a706c1307cfb8838f604051610a62929190611321565b60405180910390a3808c9a509a505050505050505050509250929050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166303b2302c856040518263ffffffff1660e01b8152600401610ade9190611a46565b600060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b249190611b40565b905060008590506000809450600093505b600082118015610b455750825181105b15610bb857600080610b71858481518110610b6357610b62611528565b5b6020026020010151856101f9565b80925081935050508084610b859190611bb8565b93508187610b939190611bec565b96508086610ba19190611bec565b95508280610bae90611c20565b9350505050610b35565b5050509250929050565b6000806000600267ffffffffffffffff811115610be257610be1611365565b5b604051908082528060200260200182016040528015610c105781602001602082028036833780820191505090505b5090507f000000000000000000000000000000000000000000000000000000000000000081600081518110610c4857610c47611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110610cb757610cb6611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f00ca747f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663523fba7f896040518263ffffffff1660e01b8152600401610d889190611205565b602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc9919061156c565b846040518363ffffffff1660e01b8152600401610de7929190611657565b600060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e2d919061174f565b9050600081600081518110610e4557610e44611528565b5b60200260200101519050610e598682611131565b955060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f88866040518363ffffffff1660e01b8152600401610eb8929190611657565b600060405180830381865afa158015610ed5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610efe919061174f565b9050600081600081518110610f1657610f15611528565b5b60200260200101519050600082600181518110610f3657610f35611528565b5b602002602001015190506000600167ffffffffffffffff811115610f5d57610f5c611365565b5b604051908082528060200260200182016040528015610f8b5781602001602082028036833780820191505090505b5090508181600081518110610fa357610fa2611528565b5b6020026020010181815250506000600167ffffffffffffffff811115610fcc57610fcb611365565b5b604051908082528060200260200182016040528015610ffa5781602001602082028036833780820191505090505b5090508b8160008151811061101257611011611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166341dbbb2a83856040518363ffffffff1660e01b81526004016110a9929190611975565b602060405180830381865afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea919061156c565b905080846110f89190611bb8565b8c9a509a505050505050505050509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008183106111405781611142565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061118f61118a6111858461114a565b61116a565b61114a565b9050919050565b60006111a182611174565b9050919050565b60006111b382611196565b9050919050565b6111c3816111a8565b82525050565b60006020820190506111de60008301846111ba565b92915050565b60006111ef8261114a565b9050919050565b6111ff816111e4565b82525050565b600060208201905061121a60008301846111f6565b92915050565b600061122b82611196565b9050919050565b61123b81611220565b82525050565b60006020820190506112566000830184611232565b92915050565b6000604051905090565b600080fd5b600080fd5b611279816111e4565b811461128457600080fd5b50565b60008135905061129681611270565b92915050565b6000819050919050565b6112af8161129c565b81146112ba57600080fd5b50565b6000813590506112cc816112a6565b92915050565b600080604083850312156112e9576112e8611266565b5b60006112f785828601611287565b9250506020611308858286016112bd565b9150509250929050565b61131b8161129c565b82525050565b60006040820190506113366000830185611312565b6113436020830184611312565b9392505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61139d82611354565b810181811067ffffffffffffffff821117156113bc576113bb611365565b5b80604052505050565b60006113cf61125c565b90506113db8282611394565b919050565b600067ffffffffffffffff8211156113fb576113fa611365565b5b61140482611354565b9050602081019050919050565b82818337600083830152505050565b600061143361142e846113e0565b6113c5565b90508281526020810184848401111561144f5761144e61134f565b5b61145a848285611411565b509392505050565b600082601f8301126114775761147661134a565b5b8135611487848260208601611420565b91505092915050565b600080604083850312156114a7576114a6611266565b5b60006114b5858286016112bd565b925050602083013567ffffffffffffffff8111156114d6576114d561126b565b5b6114e285828601611462565b9150509250929050565b60006114f782611196565b9050919050565b611507816114ec565b82525050565b600060208201905061152260008301846114fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050611566816112a6565b92915050565b60006020828403121561158257611581611266565b5b600061159084828501611557565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115ce816111e4565b82525050565b60006115e083836115c5565b60208301905092915050565b6000602082019050919050565b600061160482611599565b61160e81856115a4565b9350611619836115b5565b8060005b8381101561164a57815161163188826115d4565b975061163c836115ec565b92505060018101905061161d565b5085935050505092915050565b600060408201905061166c6000830185611312565b818103602083015261167e81846115f9565b90509392505050565b600067ffffffffffffffff8211156116a2576116a1611365565b5b602082029050602081019050919050565b600080fd5b60006116cb6116c684611687565b6113c5565b905080838252602082019050602084028301858111156116ee576116ed6116b3565b5b835b8181101561171757806117038882611557565b8452602084019350506020810190506116f0565b5050509392505050565b600082601f8301126117365761173561134a565b5b81516117468482602086016116b8565b91505092915050565b60006020828403121561176557611764611266565b5b600082015167ffffffffffffffff8111156117835761178261126b565b5b61178f84828501611721565b91505092915050565b60006060820190506117ad60008301866111f6565b6117ba60208301856111f6565b6117c76040830184611312565b949350505050565b60008115159050919050565b6117e4816117cf565b81146117ef57600080fd5b50565b600081519050611801816117db565b92915050565b60006020828403121561181d5761181c611266565b5b600061182b848285016117f2565b91505092915050565b600060408201905061184960008301856111f6565b6118566020830184611312565b9392505050565b600060a0820190506118726000830188611312565b61187f6020830187611312565b818103604083015261189181866115f9565b90506118a060608301856111f6565b6118ad6080830184611312565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118ec8161129c565b82525050565b60006118fe83836118e3565b60208301905092915050565b6000602082019050919050565b6000611922826118b7565b61192c81856118c2565b9350611937836118d3565b8060005b8381101561196857815161194f88826118f2565b975061195a8361190a565b92505060018101905061193b565b5085935050505092915050565b6000604082019050818103600083015261198f81856115f9565b905081810360208301526119a38184611917565b90509392505050565b60006020820190506119c16000830184611312565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a015780820151818401526020810190506119e6565b60008484015250505050565b6000611a18826119c7565b611a2281856119d2565b9350611a328185602086016119e3565b611a3b81611354565b840191505092915050565b60006020820190508181036000830152611a608184611a0d565b905092915050565b600067ffffffffffffffff821115611a8357611a82611365565b5b602082029050602081019050919050565b600081519050611aa381611270565b92915050565b6000611abc611ab784611a68565b6113c5565b90508083825260208201905060208402830185811115611adf57611ade6116b3565b5b835b81811015611b085780611af48882611a94565b845260208401935050602081019050611ae1565b5050509392505050565b600082601f830112611b2757611b2661134a565b5b8151611b37848260208601611aa9565b91505092915050565b600060208284031215611b5657611b55611266565b5b600082015167ffffffffffffffff811115611b7457611b7361126b565b5b611b8084828501611b12565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bc38261129c565b9150611bce8361129c565b9250828203905081811115611be657611be5611b89565b5b92915050565b6000611bf78261129c565b9150611c028361129c565b9250828201905080821115611c1a57611c19611b89565b5b92915050565b6000611c2b8261129c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c5d57611c5c611b89565b5b60018201905091905056fea26469706673582212203dcf17731c71a6180003bbdbb496bd6e734e8b41e9a2744fad6692f130c6e6d464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638def62481161005b5780638def6248146100dc578063c10df1e51461010d578063e3ab7e701461013e578063e9cbd8221461016f5761007d565b80630758d92414610082578063105036ae146100a05780637b103999146100be575b600080fd5b61008a61018d565b60405161009791906111c9565b60405180910390f35b6100a86101b1565b6040516100b59190611205565b60405180910390f35b6100c66101d5565b6040516100d39190611241565b60405180910390f35b6100f660048036038101906100f191906112d2565b6101f9565b604051610104929190611321565b60405180910390f35b61012760048036038101906101229190611490565b610a80565b604051610135929190611321565b60405180910390f35b610158600480360381019061015391906112d2565b610bc2565b604051610166929190611321565b60405180910390f35b61017761110d565b604051610184919061150d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000600267ffffffffffffffff81111561021957610218611365565b5b6040519080825280602002602001820160405280156102475781602001602082028036833780820191505090505b5090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061027f5761027e611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106102ee576102ed611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f00ca747f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663523fba7f896040518263ffffffff1660e01b81526004016103bf9190611205565b602060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610400919061156c565b846040518363ffffffff1660e01b815260040161041e929190611657565b600060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610464919061174f565b905060008160008151811061047c5761047b611528565b5b602002602001015190506104908682611131565b955060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f88866040518363ffffffff1660e01b81526004016104ef929190611657565b600060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610535919061174f565b905060008160008151811061054d5761054c611528565b5b6020026020010151905060008260018151811061056d5761056c611528565b5b602002602001015190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016105d493929190611798565b6020604051808303816000875af11580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190611807565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610693929190611834565b6020604051808303816000875af11580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d69190611807565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed17398a838930426040518663ffffffff1660e01b815260040161073895949392919061185d565b6000604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610780919061174f565b506000600167ffffffffffffffff81111561079e5761079d611365565b5b6040519080825280602002602001820160405280156107cc5781602001602082028036833780820191505090505b50905081816000815181106107e4576107e3611528565b5b6020026020010181815250506000600167ffffffffffffffff81111561080d5761080c611365565b5b60405190808252806020026020018201604052801561083b5781602001602082028036833780820191505090505b5090508b8160008151811061085357610852611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632b55414282846040518363ffffffff1660e01b81526004016108e8929190611975565b600060405180830381600087803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b5050505060008c73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109559190611205565b602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610996919061156c565b90508c73ffffffffffffffffffffffffffffffffffffffff16633790cf57826040518263ffffffff1660e01b81526004016109d191906119ac565b600060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b505050508c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f350c829dba3762192f7f146eaafe340156dec54eedfaea1df84a706c1307cfb8838f604051610a62929190611321565b60405180910390a3808c9a509a505050505050505050509250929050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166303b2302c856040518263ffffffff1660e01b8152600401610ade9190611a46565b600060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b249190611b40565b905060008590506000809450600093505b600082118015610b455750825181105b15610bb857600080610b71858481518110610b6357610b62611528565b5b6020026020010151856101f9565b80925081935050508084610b859190611bb8565b93508187610b939190611bec565b96508086610ba19190611bec565b95508280610bae90611c20565b9350505050610b35565b5050509250929050565b6000806000600267ffffffffffffffff811115610be257610be1611365565b5b604051908082528060200260200182016040528015610c105781602001602082028036833780820191505090505b5090507f000000000000000000000000000000000000000000000000000000000000000081600081518110610c4857610c47611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110610cb757610cb6611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f00ca747f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663523fba7f896040518263ffffffff1660e01b8152600401610d889190611205565b602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc9919061156c565b846040518363ffffffff1660e01b8152600401610de7929190611657565b600060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e2d919061174f565b9050600081600081518110610e4557610e44611528565b5b60200260200101519050610e598682611131565b955060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d06ca61f88866040518363ffffffff1660e01b8152600401610eb8929190611657565b600060405180830381865afa158015610ed5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610efe919061174f565b9050600081600081518110610f1657610f15611528565b5b60200260200101519050600082600181518110610f3657610f35611528565b5b602002602001015190506000600167ffffffffffffffff811115610f5d57610f5c611365565b5b604051908082528060200260200182016040528015610f8b5781602001602082028036833780820191505090505b5090508181600081518110610fa357610fa2611528565b5b6020026020010181815250506000600167ffffffffffffffff811115610fcc57610fcb611365565b5b604051908082528060200260200182016040528015610ffa5781602001602082028036833780820191505090505b5090508b8160008151811061101257611011611528565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166341dbbb2a83856040518363ffffffff1660e01b81526004016110a9929190611975565b602060405180830381865afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea919061156c565b905080846110f89190611bb8565b8c9a509a505050505050505050509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008183106111405781611142565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061118f61118a6111858461114a565b61116a565b61114a565b9050919050565b60006111a182611174565b9050919050565b60006111b382611196565b9050919050565b6111c3816111a8565b82525050565b60006020820190506111de60008301846111ba565b92915050565b60006111ef8261114a565b9050919050565b6111ff816111e4565b82525050565b600060208201905061121a60008301846111f6565b92915050565b600061122b82611196565b9050919050565b61123b81611220565b82525050565b60006020820190506112566000830184611232565b92915050565b6000604051905090565b600080fd5b600080fd5b611279816111e4565b811461128457600080fd5b50565b60008135905061129681611270565b92915050565b6000819050919050565b6112af8161129c565b81146112ba57600080fd5b50565b6000813590506112cc816112a6565b92915050565b600080604083850312156112e9576112e8611266565b5b60006112f785828601611287565b9250506020611308858286016112bd565b9150509250929050565b61131b8161129c565b82525050565b60006040820190506113366000830185611312565b6113436020830184611312565b9392505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61139d82611354565b810181811067ffffffffffffffff821117156113bc576113bb611365565b5b80604052505050565b60006113cf61125c565b90506113db8282611394565b919050565b600067ffffffffffffffff8211156113fb576113fa611365565b5b61140482611354565b9050602081019050919050565b82818337600083830152505050565b600061143361142e846113e0565b6113c5565b90508281526020810184848401111561144f5761144e61134f565b5b61145a848285611411565b509392505050565b600082601f8301126114775761147661134a565b5b8135611487848260208601611420565b91505092915050565b600080604083850312156114a7576114a6611266565b5b60006114b5858286016112bd565b925050602083013567ffffffffffffffff8111156114d6576114d561126b565b5b6114e285828601611462565b9150509250929050565b60006114f782611196565b9050919050565b611507816114ec565b82525050565b600060208201905061152260008301846114fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050611566816112a6565b92915050565b60006020828403121561158257611581611266565b5b600061159084828501611557565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115ce816111e4565b82525050565b60006115e083836115c5565b60208301905092915050565b6000602082019050919050565b600061160482611599565b61160e81856115a4565b9350611619836115b5565b8060005b8381101561164a57815161163188826115d4565b975061163c836115ec565b92505060018101905061161d565b5085935050505092915050565b600060408201905061166c6000830185611312565b818103602083015261167e81846115f9565b90509392505050565b600067ffffffffffffffff8211156116a2576116a1611365565b5b602082029050602081019050919050565b600080fd5b60006116cb6116c684611687565b6113c5565b905080838252602082019050602084028301858111156116ee576116ed6116b3565b5b835b8181101561171757806117038882611557565b8452602084019350506020810190506116f0565b5050509392505050565b600082601f8301126117365761173561134a565b5b81516117468482602086016116b8565b91505092915050565b60006020828403121561176557611764611266565b5b600082015167ffffffffffffffff8111156117835761178261126b565b5b61178f84828501611721565b91505092915050565b60006060820190506117ad60008301866111f6565b6117ba60208301856111f6565b6117c76040830184611312565b949350505050565b60008115159050919050565b6117e4816117cf565b81146117ef57600080fd5b50565b600081519050611801816117db565b92915050565b60006020828403121561181d5761181c611266565b5b600061182b848285016117f2565b91505092915050565b600060408201905061184960008301856111f6565b6118566020830184611312565b9392505050565b600060a0820190506118726000830188611312565b61187f6020830187611312565b818103604083015261189181866115f9565b90506118a060608301856111f6565b6118ad6080830184611312565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118ec8161129c565b82525050565b60006118fe83836118e3565b60208301905092915050565b6000602082019050919050565b6000611922826118b7565b61192c81856118c2565b9350611937836118d3565b8060005b8381101561196857815161194f88826118f2565b975061195a8361190a565b92505060018101905061193b565b5085935050505092915050565b6000604082019050818103600083015261198f81856115f9565b905081810360208301526119a38184611917565b90509392505050565b60006020820190506119c16000830184611312565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a015780820151818401526020810190506119e6565b60008484015250505050565b6000611a18826119c7565b611a2281856119d2565b9350611a328185602086016119e3565b611a3b81611354565b840191505092915050565b60006020820190508181036000830152611a608184611a0d565b905092915050565b600067ffffffffffffffff821115611a8357611a82611365565b5b602082029050602081019050919050565b600081519050611aa381611270565b92915050565b6000611abc611ab784611a68565b6113c5565b90508083825260208201905060208402830185811115611adf57611ade6116b3565b5b835b81811015611b085780611af48882611a94565b845260208401935050602081019050611ae1565b5050509392505050565b600082601f830112611b2757611b2661134a565b5b8151611b37848260208601611aa9565b91505092915050565b600060208284031215611b5657611b55611266565b5b600082015167ffffffffffffffff811115611b7457611b7361126b565b5b611b8084828501611b12565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bc38261129c565b9150611bce8361129c565b9250828203905081811115611be657611be5611b89565b5b92915050565b6000611bf78261129c565b9150611c028361129c565b9250828201905080821115611c1a57611c19611b89565b5b92915050565b6000611c2b8261129c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c5d57611c5c611b89565b5b60018201905091905056fea26469706673582212203dcf17731c71a6180003bbdbb496bd6e734e8b41e9a2744fad6692f130c6e6d464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}